import java.util.*;

class Course {
    String courseCode;
    String title;
    String description;
    int capacity;
    String schedule;
    int enrolled;

    public Course(String courseCode, String title, String description, int capacity, String schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolled = 0;
    }

    public boolean hasAvailableSlot() {
        return enrolled < capacity;
    }

    public void registerStudent() {
        enrolled++;
    }

    public void dropStudent() {
        if (enrolled > 0) {
            enrolled--;
        }
    }

    public int availableSlots() {
        return capacity - enrolled;
    }

    @Override
    public String toString() {
        return "Course Code: " + courseCode + ", Title: " + title + ", Description: " + description +
                ", Schedule: " + schedule + ", Available Slots: " + availableSlots();
    }
}

class Student {
    String studentId;
    String name;
    List<Course> registeredCourses;

    public Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public void registerForCourse(Course course) {
        if (course.hasAvailableSlot()) {
            registeredCourses.add(course);
            course.registerStudent();
            System.out.println(name + " successfully registered for " + course.title);
        } else {
            System.out.println("Course " + course.title + " is full.");
        }
    }

    public void dropCourse(Course course) {
        if (registeredCourses.contains(course)) {
            registeredCourses.remove(course);
            course.dropStudent();
            System.out.println(name + " successfully dropped " + course.title);
        } else {
            System.out.println("You are not registered in this course.");
        }
    }

    public void listRegisteredCourses() {
        System.out.println("Registered Courses for " + name + ":");
        if (registeredCourses.isEmpty()) {
            System.out.println("No registered courses.");
        } else {
            for (Course course : registeredCourses) {
                System.out.println(course);
            }
        }
    }
}

public class CourseRegistrationSystem {
    private Map<String, Course> courses;
    private Map<String, Student> students;
    private Scanner scanner;

    public CourseRegistrationSystem() {
        courses = new HashMap<>();
        students = new HashMap<>();
        scanner = new Scanner(System.in);
        setupCourses();
        setupStudents();
    }

    private void setupCourses() {
        courses.put("CS101", new Course("CS101", "Introduction to Computer Science", "Basics of CS", 30, "Mon-Wed-Fri 10:00-11:00"));
        courses.put("MA101", new Course("MA101", "Calculus I", "Introduction to Calculus", 25, "Tue-Thu 09:00-10:30"));
        courses.put("PHY101", new Course("PHY101", "Physics I", "Fundamentals of Physics", 20, "Mon-Wed-Fri 11:00-12:00"));
    }

    private void setupStudents() {
        students.put("S001", new Student("S001", "Alice"));
        students.put("S002", new Student("S002", "Bob"));
    }

    private void displayCourses() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses.values()) {
            System.out.println(course);
        }
    }

    private void registerStudentForCourse() {
        System.out.print("\nEnter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = students.get(studentId);

        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        displayCourses();
        System.out.print("Enter Course Code to register: ");
        String courseCode = scanner.nextLine();
        Course course = courses.get(courseCode);

        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        student.registerForCourse(course);
    }

    private void dropStudentFromCourse() {
        System.out.print("\nEnter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = students.get(studentId);

        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        student.listRegisteredCourses();
        System.out.print("Enter Course Code to drop: ");
        String courseCode = scanner.nextLine();
        Course course = courses.get(courseCode);

        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        student.dropCourse(course);
    }

    private void listStudentCourses() {
        System.out.print("\nEnter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = students.get(studentId);

        if (student != null) {
            student.listRegisteredCourses();
        } else {
            System.out.println("Student not found.");
        }
    }

    public void start() {
        while (true) {
            System.out.println("\n1. Display Courses");
            System.out.println("2. Register for Course");
            System.out.println("3. Drop Course");
            System.out.println("4. List Student Courses");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:  displayCourses();
                case 2: registerStudentForCourse();
                case 3: dropStudentFromCourse();
                case 4:  listStudentCourses();
                case 5:  {
                    System.out.println("Exiting...");
                    return;
                }
                default:  System.out.println("Invalid option. Try again.");
            }
        }
    }

    public static void main(String[] args) {
        CourseRegistrationSystem system = new CourseRegistrationSystem();
        system.start();
    }
}
